@import 'skeleton';

$webFonts: "Open+Sans:300,400,600,600italic,700|Roboto";

$font: 'Open Sans', sans-serif;
$roboto: 'Roboto', sans-serif;

// COLORS
$pink: #e74582;
$pink-dark: #c92362;
$green: #78bd43;
$green-light: #93d250;
$blue-dark: #034f6e;
$blue-light: #218fb8;
$link: #464646;
$linkHover: $blue-dark;
$red: red;


$pale: #f9f6db;
$palegray: #efefef;

// Base Styles
$baseFont: $font;
$baseFontSize: 14;
$baseColor: #464646;

// SPRITES
$sprites: url(../image/sprites.png);
$sprites2x: url(../image/sprites-2x.png);


// dimension of normal sprite file is used for retina sprite background size
$dimensionOfSpriteFile: (1000px / 2) (1000px / 2);




// Breakpoints

// USAGE:
// #selector {
//       color: red;
//       @include breakpoint(medium) {
//          color: blue;
//       }
//       @include breakpoint(small) {
//          color: green;
//       }
//    }
// more details: http://web-design-weekly.com/2013/05/12/handy-sass-mixins/

// Breakpoint Variables & Mixins Are Also Used In _skeleton.scss
// added 6/17/2014 by HE
$bp-desktop: 960px;
$bp-tablet: 959px;
$bp-tablet-narrow: 768px;
$bp-mobile: 767px;
$bp-mobile-wide: 480px;
$bp-mobile-narrow: 479px;


@mixin breakpoint($point) {
    @if      $point == large { @media only screen and (min-width: $bp-desktop) { @content; } }
    @else if $point == mediumup { @media only screen and (min-width: $bp-tablet-narrow) { @content; } }
    @else if $point == medium { @media only screen and (max-width: $bp-tablet) { @content; } }
    @else if $point == mediumnarrow { @media only screen and (min-width: $bp-tablet-narrow) and (max-width: $bp-tablet) { @content; } }
    @else if $point == small { @media only screen and (max-width: $bp-mobile)  { @content; } }
    @else if $point == smallwide { @media only screen and (min-width: $bp-mobile-wide) and (max-width: $bp-mobile)  { @content; } }
    @else if $point == smallnarrow { @media only screen and (max-width: $bp-mobile-narrow)  { @content; } }
}

// Insert FontAwesome Icon as pseudo element, default is circle-arrow-right
@mixin addIcon($content: "\f0a9") {
    content: $content;
    font-family: FontAwesome;
    font-weight: normal;
    font-style: normal;
    text-decoration: inherit;
    -webkit-font-smoothing: antialiased;
    display: inline-block;
    vertical-align: text-bottom;
}

// FONTS
@mixin fs($px, $relative:$baseFontSize, $unit:em){
    font-size: $px / $relative + unquote($unit);
}

@mixin f($family, $size, $weight: 400, $style: normal) {
    font-family: $family;
    @include fs($size);
    font-weight: $weight;
    font-style: $style;
}

@mixin spriteBlock($width, $height, $bp, $hover: $bp, $image: $sprites, $image2x: $sprites2x, $dimension: $dimensionOfSpriteFile) {
    width: $width;
    display: block;
    height: $height;
    background-image: $image;
    background-position: $bp;
    background-repeat: no-repeat;
    &:hover {
        background-position: $hover;
    }
    /* retina version
    as seen on http://codepen.io/chriscoyier/pen/IadqD */
    @include retina() {
        background-image: $image2x;
        background-size: $dimension;
    }

}

@mixin sprite($width, $height, $left: 0px, $top: 0px, $bp: 0 0, $image: $sprites, $image2x: $sprites2x, $dimension: $dimensionOfSpriteFile) {
    content: "";
    position: absolute;
    left: $left;
    top: $top;
    width: $width;
    height: $height;
    background: $image;
    background-position: $bp;

    /* retina version
    as seen on http://codepen.io/chriscoyier/pen/IadqD */
    @include retina() {
        background-image: $image2x;
        background-size: $dimension;
    }
}

@mixin spriteInline($width, $height, $va: middle, $bp: 0 0, $hover: $bp, $image: $sprites, $image2x: $sprites2x, $dimension: $dimensionOfSpriteFile) {
    content: "";
    display: inline-block;
    vertical-align: $va;
    width: $width;
    height: $height;
    background: $image;
    background-position: $bp;
    &:hover {
        background-position: $hover;
    }
    /* retina version
    as seen on http://codepen.io/chriscoyier/pen/IadqD */
    @include retina() {
        background-image: $image2x;
        background-size: $dimension;
    }
}

// RETINA
@mixin retina() {
    @media (min--moz-device-pixel-ratio: 1.3),
        (-o-min-device-pixel-ratio: 2.6/2),
        (-webkit-min-device-pixel-ratio: 1.3),
        (min-device-pixel-ratio: 1.3),
        (min-resolution: 1.3dppx) {

            @content;
    }
}

// WIDTH FUNCTIONS
@function calcWidth($width, $numCols) {
    // Returns width as a percentage of the number of given colums.
    @return  $width / skeleton-column-width($numCols) * 100%;
}

@function columnWidth($numCols: 1) {
    // Returns the width in pixels of the given number of columns.
    @return skeleton-column-width($numCols);
}


// SHOW/HIDE CONTENT MIXINS
@mixin mobile() {
    display: none !important;
    // All Mobile Sizes (devices and browser)
    @include breakpoint(small) {
        display: block !important;
    }
}
@mixin mobileInlineBlock() {
    display: none !important;
    // All Mobile Sizes (devices and browser)
    @include breakpoint(small) {
        display: inline-block !important;
    }
}
@mixin noMobile() {
    // All Mobile Sizes (devices and browser)
    @include breakpoint(small) {
        display: none !important;
    }
}
@mixin noMobileInlineBlock() {
    // All Mobile Sizes (devices and browser)
    @include breakpoint(small) {
        display: inline-block !important;
    }
}

// PRESENTATION MIXINS
@mixin boxShadow($args...){
    -moz-box-shadow:$args;
    -webkit-box-shadow:$args;
    box-shadow:$args;
}

@mixin hideBlock {
    width: 0;
    height: 0;
    display: none;
    overflow: hidden;
}

@mixin hideText {
    font: 0/0 a;
    text-shadow: none;
    color: transparent;
}

@mixin borderRadius($args){
    -moz-border-radius:$args;
    -webkit-border-radius:$args;
    border-radius:$args;
}

@mixin verticalGradient($c1, $c2 ) {
    background: -moz-linear-gradient(top,  $c1 0%, $c2 100%); /* FF3.6+ */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$c1), color-stop(100%,$c2)); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top,  $c1 0%,$c2 100%); /* Chrome10+,Safari5.1+ */
    background: -ms-linear-gradient(top,  $c1 0%,$c2 100%); /* IE10+ */
    background: linear-gradient(to bottom,  $c1 0%,$c2 100%); /* W3C */
    //filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#{ie-hex-str($c1)}, endColorstr=#{ie-hex-str($c2)}); /* IE6-9 */
}

@mixin horizontalGradient($c1, $c2 ) {
    background: -moz-linear-gradient(left,  $c1 0%, $c2 100%); /* FF3.6+ */
    background: -webkit-gradient(linear, left top, right top, color-stop(0%,$c1), color-stop(100%,$c2)); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(left,  $c1 0%,$c2 100%); /* Chrome10+,Safari5.1+ */
    background: -ms-linear-gradient(left,  $c1 0%,$c2 100%); /* IE10+ */
    background: linear-gradient(to right,  $c1 0%,$c2 100%); /* W3C */
    //filter: progid:DXImageTransform.Microsoft.gradient( startColorstr=#{ie-hex-str($c1)}, endColorstr=#{ie-hex-str($c2)},GradientType=1 ); /* IE6-9 */
}

@mixin evenlySpaced() {
    width: 100%;
    text-align: justify;
    text-justify: distribute-all-lines;
    &:after {
      content: '';
      width: 100%; /* Ensures there are at least 2 lines of text, so justification works */
      display: inline-block;
      line-height: 0;
    }
    div, li {
        display: inline-block;
        margin: 0;
    }

}

// RESETS
@mixin resetBox {
    margin: 0;
    padding: 0;
}

@mixin resetFloats() {
    clear: both;
    display: block;
    float: none;
    width: 100%;
}

@mixin resetPosition() {
    position: static;
    display: block;
}

@mixin resetButton() {
    -webkit-appearance: none;
    @include resetBox;
    @include boxShadow(none);
    background: transparent;
    border: none;
    outline: none;
    text-shadow: none;
}

@mixin resetText() {
    @include resetBox;
    line-height: 1;
    font-weight: normal;
    font-size: 100%;
}

@mixin clearFix() {
    &:after {
        content: "";
        display: block;
        height: 0;
        clear: both;
    }
}

@mixin borderBox() {
      -moz-box-sizing: border-box;
      -webkit-box-sizing: border-box;
      box-sizing: border-box;
}


@mixin placeholder($color) {
    &::-webkit-input-placeholder {
       color: $color;
    }

    &:-moz-placeholder { /* Firefox 18- */
       color: $color;
    }

    &::-moz-placeholder {  /* Firefox 19+ */
       color: $color;
    }

    &:-ms-input-placeholder {
       color: $color;
    }
}

@mixin circle($dimension) {
    width: $dimension;
    height: $dimension;
    @include borderRadius(50%);
}

@mixin accordionTop() {
    position: relative;
    padding: 2.5% 5%;
    background: #ccc;
    &:before {
        @include addIcon("\f054"); // chevron right
    }
    &.active {
        background: #666;
        color: #fff;
        &:before { content: "\f078"; } // chevron down
    }
}

@mixin accordionContent() {
    @include borderBox;
    display: none;
    position: relative;
    padding: 1% 5%;
}

@mixin primaryButton($padding: 12px 0, $fontsize: 17px) {
    @include transition(all 0.2s ease);
    @include boxShadow(1px 1px 4px 0px rgba(0, 0, 0, 0.15));
    @include borderRadius(5px);
    display: block;
    width: 100%;
    padding: $padding;
    font-family: $font;
    font-size: $fontsize;
    font-weight: 700;
    color: #fff;
    background: $pink;
    text-align: center;
    text-decoration: none;
    text-transform: uppercase;

    &:visited {
        color: #fff;
        background: $pink;
    }

    &:hover {
        color: #fff;
        background: #ca2462;
    }
}

@mixin secondaryButton() {
    display: block;
    height: 30px;
    padding: 0 10px;
    line-height: 30px;
    background-color: #ccc;
    border-left: 1px solid white;
    border-right: 1px solid white;
    color: #333;
    text-align: center;
    text-decoration: none;
    font-weight: bold;

    &:hover {
        background-color: #111;
        color: #ccc;
    }
}


@mixin transformTranslate3d($x, $y) {
    -webkit-transform: translate($x, $y) translate3d(0px, 0px, 0px);
    -moz-transform: translate($x, $y) translate3d(0px, 0px, 0px);
    -o-transform: translate($x, $y) translate3d(0px, 0px, 0px);
    -ms-transform: translate($x, $y) translate3d(0px, 0px, 0px);
    transform: translate($x, $y) translate3d(0px, 0px, 0px);
}

@mixin accelerate() {
    -webkit-transform: translateZ(0);
    -moz-transform: translateZ(0);
    -ms-transform: translateZ(0);
    -o-transform: translateZ(0);
    transform: translateZ(0);
}

@mixin transitionTransform($args...) {
    -webkit-transition: -webkit-transform $args;
    -moz-transition: -moz-transform $args;
    -ms-transition: -ms-transform $args;
    transition: transform $args;
}

@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    transition: $args;
}

@mixin translate($x, $y) {
    -webkit-transform: translate($x, $y);
    -moz-transform: translate($x, $y);
    -o-transform: translate($x, $y);
    -ms-transform: translate($x, $y);
    transform: translate($x, $y);
}

@mixin transform($args, $origin:false) {
    -webkit-transform: unquote($args);
    -moz-transform: unquote($args);
    -o-transform: unquote($args);
    -ms-transform: unquote($args);
    transform: unquote($args);

    @if $origin != false {
        -webkit-transform-origin: $origin;
        -moz-transform-origin: $origin;
        -ms-transform-origin: $origin;
        transform-origin: $origin;
    }
}
